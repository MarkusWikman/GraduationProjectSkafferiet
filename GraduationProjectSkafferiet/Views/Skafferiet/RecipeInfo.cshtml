@model RecipeInfoVM;

@section breadcrumb{
    <nav style="--bs-breadcrumb-divider: url(&#34;data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='8' height='8'%3E%3Cpath d='M2.5 0L1 1.5 3.5 4 1 6.5 2.5 8l4-4-4-4z' fill='%236c757d'/%3E%3C/svg%3E&#34;);" aria-label="breadcrumb">
        <ol class="breadcrumb RecipeInfo">
            <li class="breadcrumb-item RecipeInfo"><a asp-action="Home" asp-controller="Skafferiet">Ingredients</a></li>
            <li class="breadcrumb-item RecipeInfo"><a href="javascript:history.back()" @*onclick="history.back()"*@>Recipes</a></li>
            <li class="breadcrumb-item active RecipeInfo" aria-current="page">Recipe</li>
        </ol>
    </nav>
}

<div class="container mx-auto">
    <h1 class="mb-5 mt-5 SizeForTitle">@Model.Title 
        <br/>
        <span class="SizeForTextInParenthesis">(@Model.Servings serving@(Model.Servings > 1 ? "s" :"") ready in @Model.ReadyInMinutes minutes)</span></h1>
    <div class="row">

        <div class="col-md-6">

            <span class="badge text-bg-success mb-3" @(Model.Vegetarian ? "" : "hidden")>Vegetarian</span>
            <span class="badge text-bg-success mb-3" @(Model.Vegan ? "" : "hidden")>Vegan</span>
            <span class="badge text-bg-success mb-3" @(Model.GlutenFree ? "" : "hidden")>Gluten Free</span>
            <span class="badge text-bg-success mb-3" @(Model.DairyFree ? "" : "hidden")>Dairy Free</span>
            <h4 class="mt-0 SizeForIngrTitle">Ingredients</h4>
            <div class="list-group-item">
                @foreach (var item in Model.Ingredients)
                {
                    <div class="mb-2 SizeForIngrNInst">@item</div>
                }
            </div>
            <h4 class="mt-5 SizeForIngrTitle">Instructions</h4>
            <ol class="RecipeInfo">
                @foreach (var item in Model.Instructions)
                {
                    <li class="mb-2 RecipeInfo SizeForIngrNInst">@item</li>
                }
            </ol>
        </div>
        <div class="col-md-6 imgDiv">
            <img src="@Model.Image" class="ImgInRecipe" />
            <div class="mt-2 SizeForIngrNInst">
                @Model.Nutrients[0].Name
                @Model.Nutrients[0].Amount
                @Model.Nutrients[0].Unit

                @Model.Nutrients[1].Name
                @Model.Nutrients[1].Amount
                @Model.Nutrients[1].Unit

                @Model.Nutrients[2].Name
                @Model.Nutrients[2].Amount
                @Model.Nutrients[2].Unit

                @Model.Nutrients[3].Name
                @Model.Nutrients[3].Amount
                @Model.Nutrients[3].Unit
            </div>
            <div style="display: flex; justify-content: center; align-items: center;" class="mt-2">
                <canvas id="can" width="200" height="200" />
            </div>
        </div>
    </div>
    @section scripts {
        <script>
            var canvas = document.getElementById("can");
            var ctx = canvas.getContext("2d");
            var lastend = 0;
            var data = [Math.ceil(@Model.Nutrients[1].Amount), Math.ceil(@Model.Nutrients[2].Amount), Math.ceil(@Model.Nutrients[3].Amount)];
            var myTotal = 0;
            var myColor = ['#afcc4c', '#95b524', '#c1dd54'];
            var labels = ['F', 'C', 'P'];

            for (var e = 0; e < data.length; e++) {
                myTotal += data[e];
            }

            // make the chart 10 px smaller to fit on canvas
            var off = 10
            var w = (canvas.width - off) / 2
            var h = (canvas.height - off) / 2
            for (var i = 0; i < data.length; i++) {
                ctx.fillStyle = myColor[i];
                ctx.strokeStyle = 'white';
                ctx.lineWidth = 2;
                ctx.beginPath();
                ctx.moveTo(w, h);
                var len = (data[i] / myTotal) * 2 * Math.PI
                var r = h - off / 2
                ctx.arc(w, h, r, lastend, lastend + len, false);
                ctx.lineTo(w, h);
                ctx.fill();
                ctx.stroke();
                ctx.fillStyle = 'white';
                ctx.font = "20px Arial";
                ctx.textAlign = "center";
                ctx.textBaseline = "middle";
                var mid = lastend + len / 2
                ctx.fillText(labels[i], w + Math.cos(mid) * (r / 2), h + Math.sin(mid) * (r / 2));
                lastend += Math.PI * 2 * (data[i] / myTotal);
            }
        </script>
    }
        </div>


